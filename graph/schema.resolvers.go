package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"fmt"

	"github.com/dugtriol/BarterApp/internal/controller/graph"
	"github.com/dugtriol/BarterApp/internal/controller/graph/model"
)

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.CreateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - CreateUser"))
}

// TotalUsers is the resolver for the totalUsers field.
func (r *queryResolver) TotalUsers(ctx context.Context) (int, error) {
	panic(fmt.Errorf("not implemented: TotalUsers - totalUsers"))
}

// AllUsers is the resolver for the allUsers field.
func (r *queryResolver) AllUsers(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: AllUsers - allUsers"))
}

// TotalProducts is the resolver for the totalProducts field.
func (r *queryResolver) TotalProducts(ctx context.Context) (int, error) {
	panic(fmt.Errorf("not implemented: TotalProducts - totalProducts"))
}

// AllProducts is the resolver for the allProducts field.
func (r *queryResolver) AllProducts(ctx context.Context, category *model.ProductCategory, first *int, start *int) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: AllProducts - allProducts"))
}

// User is the resolver for the User field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - User"))
}

// Product is the resolver for the Product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - Product"))
}

// NewProduct is the resolver for the newProduct field.
func (r *subscriptionResolver) NewProduct(ctx context.Context, category *model.ProductCategory) (<-chan *model.Product, error) {
	panic(fmt.Errorf("not implemented: NewProduct - newProduct"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
