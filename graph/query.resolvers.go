package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"

	"github.com/dugtriol/BarterApp/graph/model"
	"github.com/dugtriol/BarterApp/graph/scalar"
	"github.com/dugtriol/BarterApp/internal/controller"
	"github.com/dugtriol/BarterApp/internal/service"
	"github.com/dugtriol/BarterApp/pkg/middleware"
)

// Products is the resolver for the Products field.
func (r *queryResolver) Products(ctx context.Context, category model.ProductCategory, search string, sort model.ProductSort, first int, start int) ([]*model.Product, error) {
	_, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Product -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}

	result, err := r.Services.Product.FindLike(ctx, category, search, sort)
	if err != nil {
		r.Log.Error("queryResolver - Products - r.Services.Product.All: ", err)
		return nil, err
	}
	return result, nil
}

// User is the resolver for the User field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	output, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Product -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}

	var mode model.UserMode
	err = mode.UnmarshalGQL(output.Mode)
	if err != nil {
		r.Log.Error("Resolvers.User -  mode.UnmarshalGQL(output.Mode): ", err)
		return nil, controller.ErrNotValid
	}

	result := model.User{
		ID:       output.Id,
		Name:     output.Name,
		Password: output.Password,
		Email:    output.Email,
		Phone:    output.Phone,
		City:     output.City,
		Mode:     mode,
	}
	return &result, nil
}

// Product is the resolver for the Product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	_, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Product -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}

	product, err := r.Services.Product.GetById(ctx, r.Log, service.GetByIdProductInput{Id: id})
	if err != nil {
		r.Log.Error("Resolvers.Product -  r.Services.Product.GetById: ", err)
		return nil, controller.ErrNotFound
	}

	var category model.ProductCategory
	err = category.UnmarshalGQL(product.Category)
	if err != nil {
		r.Log.Error("Resolvers.Product -  category.UnmarshalGQL(product.Category): ", err)
		return nil, controller.ErrNotValid
	}

	var status model.ProductStatus
	err = status.UnmarshalGQL(product.Status)
	if err != nil {
		r.Log.Error("Resolvers.Product -  status.UnmarshalGQL(product.Status): ", err)
		return nil, controller.ErrNotValid
	}

	result := model.Product{
		ID:          product.Id,
		Category:    category,
		Name:        product.Name,
		Description: product.Description,
		Image:       product.Image,
		Status:      status,
		CreatedAt:   scalar.DateTime(product.CreatedAt),
		CreatedBy:   product.UserId,
	}
	return &result, nil
}

// Categories is the resolver for the Categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.ProductCategory, error) {
	_, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Product -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}
	var res = make([]*model.ProductCategory, len(model.AllProductCategory))
	for i, category := range model.AllProductCategory {
		res[i] = &category
	}
	return res, nil
}

// TransactionsByOwner is the resolver for the TransactionsByOwner field.
func (r *queryResolver) TransactionsByOwner(ctx context.Context) ([]*model.Transaction, error) {
	current, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Transaction -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}
	return r.Services.Transaction.GetByOwner(ctx, current.Id)
}

// TransactionByBuyer is the resolver for the TransactionByBuyer field.
func (r *queryResolver) TransactionByBuyer(ctx context.Context) ([]*model.Transaction, error) {
	current, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Transaction -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}
	return r.Services.Transaction.GetByBuyer(ctx, current.Id)
}

// GetByUserAvailableProducts is the resolver for the GetByUserAvailableProducts field.
func (r *queryResolver) GetByUserAvailableProducts(ctx context.Context) ([]*model.Product, error) {
	current, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Transaction -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}
	return r.Services.Product.GetByUserAvailableProducts(ctx, current.Id)
}

// GetByCategoryAvailable is the resolver for the GetByCategoryAvailable field.
func (r *queryResolver) GetByCategoryAvailable(ctx context.Context, category *model.ProductCategory) ([]*model.Product, error) {
	_, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Transaction -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}
	return r.Services.Product.GetByCategoryAvailable(ctx, category.String())
}

// GetOngoing is the resolver for the GetOngoing field.
func (r *queryResolver) GetOngoing(ctx context.Context) ([]*model.Transaction, error) {
	current, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Transaction -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}
	return r.Services.Transaction.GetOngoing(ctx, current.Id)
}

// GetCreated is the resolver for the GetCreated field.
func (r *queryResolver) GetCreated(ctx context.Context) ([]*model.Transaction, error) {
	current, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Transaction -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}
	return r.Services.Transaction.GetCreated(ctx, current.Id)
}

// GetArchive is the resolver for the GetArchive field.
func (r *queryResolver) GetArchive(ctx context.Context) ([]*model.Transaction, error) {
	current, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Transaction -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}
	return r.Services.Transaction.GetArchive(ctx, current.Id)
}

// Messages is the resolver for the messages field.
func (r *queryResolver) Messages(ctx context.Context) ([]*model.Message, error) {
	return r.ChatMessages, nil
}

// GetLikes is the resolver for the getLikes field.
func (r *queryResolver) GetLikes(ctx context.Context) ([]*model.Favorites, error) {
	current, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Transaction -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}
	output, err := r.Services.Favorites.GetFavoritesByUserId(ctx, current.Id)
	if err != nil {
		r.Log.Error("queryResolver -  GetLikes - ", err)
		return nil, controller.ErrNotFound
	}
	return output, nil
}

// GetFavoritesProducts is the resolver for the getFavoritesProducts field.
func (r *queryResolver) GetFavoritesProducts(ctx context.Context) ([]*model.Product, error) {
	current, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Transaction -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}
	output, err := r.Services.Product.GetLikedProductsByUserId(ctx, current.Id)
	if err != nil {
		r.Log.Error("queryResolver -  GetFavoritesProducts - ", err)
		return nil, controller.ErrNotFound
	}
	return output, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
