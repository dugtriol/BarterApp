package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"fmt"

	"github.com/dugtriol/BarterApp/graph/model"
	"github.com/dugtriol/BarterApp/internal/controller"
	"github.com/dugtriol/BarterApp/internal/service"
	"github.com/dugtriol/BarterApp/pkg/middleware"
)

// Products is the resolver for the Products field.
func (r *queryResolver) Products(ctx context.Context, first *int, start *int) ([]*model.Product, error) {
	if first == nil || start == nil {
		return nil, controller.ErrNotValid
	}

	limit := *first
	offset := *start
	output, err := r.Services.Product.All(ctx, limit, offset)
	if err != nil {
		r.Log.Error("queryResolver - Products - r.Services.Product.All: ", err)
		return nil, err
	}

	result := make([]*model.Product, len(output))
	for i, item := range output {
		var category model.ProductCategory
		err = category.UnmarshalGQL(item.Category)
		if err != nil {
			r.Log.Error("Resolvers.Product -  category.UnmarshalGQL(product.Category): ", err)
			return nil, controller.ErrNotValid
		}

		var status model.ProductStatus
		err = status.UnmarshalGQL(item.Status)
		if err != nil {
			r.Log.Error("Resolvers.Product -  category.UnmarshalGQL(product.Status): ", err)
			return nil, controller.ErrNotValid
		}

		//var temp *model.Product
		result[i] = &model.Product{
			ID:          item.Id,
			Category:    category,
			Name:        item.Name,
			Description: item.Description,
			Image:       item.Image,
			Status:      status,
			CreatedBy:   item.UserId,
			CreatedAt:   item.CreatedAt.String(),
		}
		//log.Info(temp)
		//result = append(result, temp)
	}
	//log.Info(result)
	//log.Info(len(result))
	return result, nil
}

// ProductsByCategory is the resolver for the ProductsByCategory field.
func (r *queryResolver) ProductsByCategory(ctx context.Context, category *model.ProductCategory, first *int, start *int) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: ProductsByCategory - ProductsByCategory"))
}

// User is the resolver for the User field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	output, err := middleware.GetCurrentUserFromCTX(ctx)
	if err != nil {
		r.Log.Error("Resolvers.Product -  middleware.GetCurrentUserFromCTX: no user in context")
		return nil, controller.ErrNotAuthenticated
	}

	//output, err := r.Services.User.GetById(ctx, r.Log, service.UserGetByIdInput{Id: id})
	//if err != nil {
	//	r.Log.Error("Resolvers.User -  r.Services.User.GetById: ", err)
	//	return nil, controller.ErrNotFound
	//}

	var mode model.UserMode
	err = mode.UnmarshalGQL(output.Mode)
	if err != nil {
		r.Log.Error("Resolvers.User -  mode.UnmarshalGQL(output.Mode): ", err)
		return nil, controller.ErrNotValid
	}

	result := model.User{
		ID:       output.Id,
		Name:     output.Name,
		Password: output.Password,
		Email:    output.Email,
		Phone:    output.Phone,
		City:     output.City,
		Mode:     mode,
	}
	return &result, nil
}

// Product is the resolver for the Product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	product, err := r.Services.Product.GetById(ctx, r.Log, service.GetByIdProductInput{Id: id})
	if err != nil {
		r.Log.Error("Resolvers.Product -  r.Services.Product.GetById: ", err)
		return nil, controller.ErrNotFound
	}

	var category model.ProductCategory
	err = category.UnmarshalGQL(product.Category)
	if err != nil {
		r.Log.Error("Resolvers.Product -  category.UnmarshalGQL(product.Category): ", err)
		return nil, controller.ErrNotValid
	}

	var status model.ProductStatus
	err = status.UnmarshalGQL(product.Status)
	if err != nil {
		r.Log.Error("Resolvers.Product -  status.UnmarshalGQL(product.Status): ", err)
		return nil, controller.ErrNotValid
	}

	result := model.Product{
		ID:          product.Id,
		Category:    category,
		Name:        product.Name,
		Description: product.Description,
		Image:       product.Image,
		Status:      status,
		CreatedAt:   product.CreatedAt.String(),
	}
	return &result, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
