scalar Time

type AuthToken {
    accessToken: String!
    expiredAt: Time!
}

type AuthResponse {
    authToken: AuthToken!
    user: User!
}

input LoginInput {
    password: String!
    email: String!
}

type User {
    id: ID!
    name: String!
    password: String!
    email: String!
    phone: String!
    city: String!
    mode: UserMode!
    postedProducts: [Product!]!
}

type Product {
    id: ID!
    category: ProductCategory!
    name: String!
    description: String!
    image: String!
    status: ProductStatus!
    createdBy: User!
    createdAt: DateTime!
}

scalar DateTime

enum ProductCategory {
    HOME
    CLOTHES
}

enum ProductStatus {
    CREATED
    SOLD
}

enum UserMode {
    CLIENT
    ADMIN
}

type Query {
    totalUsers: Int!
    allUsers: [User!]!
    totalProducts: Int!
    allProducts(category: ProductCategory, first: Int=10, start: Int=0): [Product!]!

    User: User!
    Product(id: ID!): Product!
}

input CreateUserInput {
    name: String!
    email: String!
    phone: String!
    password: String!
    city: String!
    mode: UserMode!
}

type AuthPayload {
    user: User!
    token: String!
}

input CreateProductInput {
    category: ProductCategory!
    name: String!
    description: String!
    image: String!
}

type Mutation {
    Register(input: CreateUserInput): AuthResponse!
    Login(input: LoginInput): AuthResponse!
    CreateProduct(input: CreateProductInput): Product!
}

type Subscription {
  newProduct(category: ProductCategory): Product!
}

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}
